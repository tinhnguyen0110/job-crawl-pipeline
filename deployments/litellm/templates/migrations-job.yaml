{{- if .Values.migrationJob.enabled }}
# This job runs the prisma migrations for the LiteLLM DB.
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ include "litellm.fullname" . }}-migrations
  annotations:
    # XÓA BỎ các annotation của ArgoCD
    # argocd.argoproj.io/hook: PreSync
    # argocd.argoproj.io/hook-delete-policy: BeforeHookCreation

    # THÊM VÀO các annotation của Helm
    "helm.sh/hook": pre-install,pre-upgrade  # Chạy hook trước khi install VÀ trước khi upgrade
    "helm.sh/hook-weight": "-5"               # Ưu tiên chạy hook này trước các hook khác (số nhỏ chạy trước)
    "helm.sh/hook-delete-policy": before-hook-creation # Tự động xóa hook cũ trước khi tạo hook mới
    "argocd.argoproj.io/sync-wave": "1"
    checksum/config: {{ toYaml .Values | sha256sum }}
spec:
  template:
    metadata:
      annotations:
        {{- with .Values.migrationJob.annotations }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
    spec:
      serviceAccountName: {{ include "litellm.serviceAccountName" . }}

      initContainers:
        - name: wait-for-postgres
          # Dùng một image nhẹ có chứa sẵn công cụ client của postgresql
          image: postgres:15-alpine
          # Command sẽ chạy một vòng lặp, dùng pg_isready để kiểm tra kết nối
          # Nó sẽ thử lại sau mỗi 2 giây cho đến khi database sẵn sàng
          command:
            - sh
            - "-c"
            - |
              until pg_isready -h {{ .Release.Name }}-postgresql -p 5432 -U {{ .Values.postgresql.auth.username }}; do
                echo "Waiting for database to be ready 123 ...";
                sleep 2;
              done;

      containers:
        - name: prisma-migrations
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default (printf "main-%s" .Chart.AppVersion) }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          command: ["python", "litellm/proxy/prisma_migration.py"]
          workingDir: "/app"
          env:
            {{- if .Values.db.useExisting }}
            - name: DATABASE_USERNAME
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.db.secret.name }}
                  key: {{ .Values.db.secret.usernameKey }}
            - name: DATABASE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.db.secret.name }}
                  key: {{ .Values.db.secret.passwordKey }}
            - name: DATABASE_HOST
              value: {{ .Values.db.endpoint }}
            - name: DATABASE_NAME
              value: {{ .Values.db.database }}
            - name: DATABASE_URL
              value: {{ .Values.db.url | quote }}
            {{- else }}
            - name: DATABASE_URL
              value: postgresql://{{ .Values.postgresql.auth.username }}:{{ .Values.postgresql.auth.password }}@{{ .Release.Name }}-postgresql/{{ .Values.postgresql.auth.database }}
            {{- end }}
            - name: DISABLE_SCHEMA_UPDATE
              value: "false" # always run the migration from the Helm PreSync hook, override the value set
          {{- with .Values.volumeMounts }}
          volumeMounts:
            {{- toYaml . | nindent 12 }}
          {{- end }}
      {{- with .Values.volumes }}
      volumes:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      restartPolicy: OnFailure
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
  ttlSecondsAfterFinished: {{ .Values.migrationJob.ttlSecondsAfterFinished }}
  backoffLimit: {{ .Values.migrationJob.backoffLimit }}
{{- end }}
