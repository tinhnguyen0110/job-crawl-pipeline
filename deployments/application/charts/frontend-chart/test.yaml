# frontend-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: react-frontend-deployment
  namespace: application
  labels:
    app: react-frontend
spec:
  replicas: 1
  selector:
    matchLabels:
      app: react-frontend
  template:
    metadata:
      labels:
        app: react-frontend
    spec:
      containers:
      - name: react-frontend-container
        image: gcr.io/alpine-figure-461007-i9/react-frontend:v2 # THAY BẰNG IMAGE TAG CỦA BẠN
        imagePullPolicy: Always
        ports:
        - containerPort: 80 # Cổng mà Nginx đang chạy
        readinessProbe:
          httpGet:
            path: /
            port: 8080
          initialDelaySeconds: 5
          periodSeconds: 5
        volumeMounts:
            - name: nginx-config-volume # Tên phải khớp với `volumes.name` ở dưới
              mountPath: /etc/nginx/conf.d/default.conf # Đường dẫn ghi đè config NGINX
              subPath: default.conf # Tên key trong ConfigMap
              readOnly: true
      volumes:
        - name: nginx-config-volume
          configMap:
            name: frontend-chart-nginx-config
---
apiVersion: v1
kind: ConfigMap
metadata:
  # Tên của ConfigMap này
  name: frontend-chart-nginx-config
  labels:
    app.kubernetes.io/name: frontend-chart
    app.kubernetes.io/instance: frontend-chart
data:
  # Key của data chính là tên file chúng ta sẽ tạo: "default.conf"
  default.conf: |
    server {
        listen 80;
        server_name localhost;

        location / {
            root   /usr/share/nginx/html;
            index  index.html;
            try_files $uri $uri/ /index.html;
        }

        location /api/ {
            proxy_pass http://my-backend-release-backend-chart:80;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
    }

---
# frontend-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: react-frontend-service
  namespace: application
  annotations:
    cloud.google.com/neg: '{"ingress": true}'
spec:
  type: ClusterIP # QUAN TRỌNG: Tạo ra một IP public để truy cập từ Internet
  selector:
    app: react-frontend
  ports:
  - protocol: TCP
    port: 80 # Cổng public mà người dùng sẽ truy cập
    targetPort: 80 # Cổng mà container Nginx đang lắng nghe
---
# --- INGRESS ---
# Yêu cầu GKE tạo một Google Cloud Load Balancer
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: test-ingress
spec:
  rules:
  - host: joblytics.io.vn # Một tên miền tạm thời để test
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: test-service # Trỏ đến Service ở trên
            port:
              number: 80            # Trỏ đến port 80 của Service