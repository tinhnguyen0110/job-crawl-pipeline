# .github/workflows/build-and-push.yaml
name: CI - Build and Push Docker Images

# Trigger workflow khi có push lên nhánh develop hoặc main
on:
  push:
    branches:
      - main
      - deploy_gke

# Biến môi trường dùng chung cho cả workflow
env:
  # Tách biệt rõ ràng
  GAR_REGION: ${{ secrets.GCP_REGION }}
  GKE_ZONE: ${{ secrets.GCP_ZONE }}
  GCP_SERVICE_ACCOUNT: ${{ secrets.GCP_SERVICE_ACCOUNT }}
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  GAR_REPO: "crawl2insight-repo"

jobs:
  build-and-push:
    name: Build and Push Images
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
      
    # === PHẦN QUAN TRỌNG ===
    # Xuất ra các biến để job `deploy` sau này có thể sử dụng
    # Chúng ta sử dụng lại chính logic của bạn ở đây.
    outputs:
      # backend_built: ${{ steps.changed_files.outputs.backend_changed == 'true' }}
      # frontend_built: ${{ steps.changed_files.outputs.frontend_changed == 'true' }}
      # airflow_built: ${{ steps.changed_files.outputs.airflow_changed == 'true' }}
      # any_changed: ${{ steps.changed_files.outputs.any_changed == 'true' }}
      # image_tag: ${{ steps.git_tag.outputs.tag }}
      backend_built: true
      frontend_built: true
      airflow_built: true 
      image_tag: 4341142
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 

      # - name: Get Image Tag (Git Commit SHA)
      #   id: git_tag
      #   run: echo "tag=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

      # # --- Bước kiểm tra thay đổi file (Giữ nguyên) ---
      # - name: Check for file changes using manual git diff
      #   id: changed_files
      #   run: |
      #     CHANGED_FILES=$(git diff --name-only ${{ github.event.before }} ${{ github.sha }})
      #     echo "--- All changed files ---"
      #     echo "${CHANGED_FILES}"
      #     echo "-------------------------"

      #     # File tạm để ghi output
      #     OUTPUT_FILE="$GITHUB_OUTPUT"

      #     echo "backend_changed=false" >> "$OUTPUT_FILE"
      #     echo "frontend_changed=false" >> "$OUTPUT_FILE"
      #     echo "airflow_changed=false" >> "$OUTPUT_FILE"
      #     echo "any_changed=false" >> "$OUTPUT_FILE"

      #     if [ -n "$CHANGED_FILES" ]; then
      #       echo "Found changes, setting any_changed=true"
      #       echo "any_changed=true" >> "$OUTPUT_FILE"

      #       if echo "$CHANGED_FILES" | grep -qE "(^src/backend/|Dockerfile\.backend|\.trigger-backend)"; then
      #         echo "Backend files changed: YES"
      #         echo "backend_changed=true" >> "$OUTPUT_FILE"
      #       fi

      #       if echo "$CHANGED_FILES" | grep -qE "(^src/frontend/|Dockerfile\.frontend|\.trigger-frontend)"; then
      #         echo "Frontend files changed: YES"
      #         echo "frontend_changed=true" >> "$OUTPUT_FILE"
      #       fi

      #       if echo "$CHANGED_FILES" | grep -qE "(^airflow/|airflow/Dockerfile|\.trigger-airflow)"; then
      #         echo "Airflow files changed: YES"
      #         echo "airflow_changed=true" >> "$OUTPUT_FILE"
      #       fi
      #     else
      #       echo "No files changed in this push."
      #     fi


      # - name: List all changed files
      #   run: echo "${{ steps.changed_files.outputs.all_changed_files }}"

      # - name: Debug Changed Outputs
      #   run: |
      #     echo  "Backend changed: ${{ steps.changed_files.outputs.backend_changed }}"
      #     echo "Frontend changed: ${{ steps.changed_files.outputs.frontend_changed }}"
      #     echo "Airflow changed: ${{ steps.changed_files.outputs.airflow_changed }}"
      #     echo "Any files changed: ${{ steps.changed_files.outputs.any_changed }}"

      # - name: Setup GCP Auth
      #   if: steps.changed_files.outputs.any_changed == 'true'
      #   uses: ./.github/actions/setup-gcp-auth
      #   with:
      #     workload_identity_provider: ${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER }}
      #     service_account: ${{ secrets.GCP_SERVICE_ACCOUNT }}

      # # Gọi action cài đặt Docker
      # - name: Setup Docker for GAR
      #   if: steps.changed_files.outputs.any_changed == 'true'
      #   uses: ./.github/actions/setup-docker
      #   with:
      #     gar_location: ${{ env.GAR_REGION }}

      # - name: Build and Push Backend Image
      #   id: build_backend
      #   # Chỉ chạy nếu có thay đổi trong các file của backend
      #   if: steps.changed_files.outputs.backend_changed == 'true'
      #   uses: docker/build-push-action@v5
      #   with:
      #     context: ./src/application/backend/
      #     file: ./src/application/backend/Dockerfile.backend
      #     push: true
      #     tags: ${{ env.GAR_REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.GAR_REPO }}/backend:${{ steps.git_tag.outputs.tag }}
      #     # Thêm cache
      #     cache-from: type=registry,ref=${{ env.GAR_REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.GAR_REPO }}/backend:cache
      #     cache-to: type=registry,ref=${{ env.GAR_REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.GAR_REPO }}/backend:cache,mode=max
      # - name: Build and Push Frontend Image
      #   id: build_frontend
      #   # Chỉ chạy nếu có thay đổi trong các file của frontend
      #   if: steps.changed_files.outputs.frontend_changed == 'true'
      #   uses: docker/build-push-action@v5
      #   with:
      #     context: ./src/application/frontend/
      #     file: ./src/application/frontend/Dockerfile.frontend
      #     push: true
      #     tags: ${{ env.GAR_REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.GAR_REPO }}/frontend:${{ steps.git_tag.outputs.tag }}
      #     # Thêm cache
      #     cache-from: type=registry,ref=${{ env.GAR_REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.GAR_REPO }}/frontend:cache
      #     cache-to: type=registry,ref=${{ env.GAR_REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.GAR_REPO }}/frontend:cache,mode=max
      # - name: Build and Push Airflow Image
      #   id: build_airflow
      #   # Chỉ chạy nếu có thay đổi trong các file của Airflow
      #   if: steps.changed_files.outputs.airflow_changed == 'true'
      #   uses: docker/build-push-action@v5
      #   with:
      #     context: ./airflow/
      #     file: ./airflow/Dockerfile
      #     push: true
      #     tags: ${{ env.GAR_REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.GAR_REPO }}/airflow:${{ steps.git_tag.outputs.tag }}
      #     # Thêm cache
      #     cache-from: type=registry,ref=${{ env.GAR_REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.GAR_REPO }}/airflow:cache
      #     cache-to: type=registry,ref=${{ env.GAR_REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.GAR_REPO }}/airflow:cache,mode=max
      # - name: Log what was built
      #   run: |
      #     echo "Image Tag: ${{ steps.git_tag.outputs.tag }}"
      #     echo "Backend built: ${{ steps.changed_files.outputs.backend_changed }}"
      #     echo "Frontend built: ${{ steps.changed_files.outputs.frontend_changed }}"
      #     echo "Airflow built: ${{ steps.changed_files.outputs.airflow_changed }}"
      # - name: Debug image tag
      #   run: | 
      #     echo "Image tag is: ${{ steps.git_tag.outputs.tag }}"

  deploy:
    name: Deploy to GKE
    runs-on: ubuntu-latest
    needs: build-and-push
    # if: needs.build-and-push.outputs.any_changed == 'true'
    permissions:
      contents: 'read'
      id-token: 'write' # << Quyền quan trọng nhất để lấy OIDC token
    # Sửa lại logic này để map đúng tên môi trường
    environment: ${{ (github.ref == 'refs/heads/main' && 'production') || (github.ref == 'refs/heads/deploy_gke' && 'development') }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # <<< TẬN DỤNG ACTION ĐÃ TẠO >>>
      - name: Setup GCP Auth
        uses: ./.github/actions/setup-gcp-auth # << Rất gọn gàng!
        with:
          workload_identity_provider: ${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.GCP_SERVICE_ACCOUNT }}

      - name: Get GKE Credentials
        uses: google-github-actions/get-gke-credentials@v2
        with:
          cluster_name: "simple-cluster"
          # Sử dụng biến môi trường đã tạo để đảm bảo nhất quán
          location: ${{ env.GKE_ZONE }} 
          
          # <<< THÊM DÒNG NÀY VÀO >>>
          project_id: ${{ env.PROJECT_ID }}

      - name: Install Helmfile
        run: |
          curl -L https://github.com/helmfile/helmfile/releases/download/v0.165.0/helmfile_0.165.0_linux_amd64.tar.gz | tar xz
          sudo mv helmfile /usr/local/bin/helmfile
      - name: Install helm-diff plugin
        run: helm plugin install https://github.com/databus23/helm-diff

      - name: Determine Environment Name
        id: environment
        run: |
          if [ "${{ github.ref }}" = "refs/heads/main" ]; then
            echo "env_name=production" >> $GITHUB_OUTPUT
          else
            echo "env_name=development" >> $GITHUB_OUTPUT
          fi
      - name: Debug TAG in CD
        run: |
          echo "Image tag from CI: ${{ needs.build-and-push.outputs.image_tag }}"
      - name: Run Helmfile Deploy
        run: |
          # Lấy tag image từ output của job trước
          TAG=${{ needs.build-and-push.outputs.image_tag }}

          # Khởi tạo một mảng Bash rỗng để chứa các tham số --set
          SET_ARGS=()

          # Kiểm tra và thêm tham số cho từng image đã được build
          # Cách làm đúng chuẩn: thêm flag và giá trị của nó như 2 phần tử riêng biệt
          echo "DEBUG: TAG = $TAG, Backend built: ${{ needs.build-and-push.outputs.backend_built }}, Frontend built: ${{ needs.build-and-push.outputs.frontend_built }}, Airflow built: ${{ needs.build-and-push.outputs.airflow_built }}"
          if [ "${{ needs.build-and-push.outputs.backend_built }}" = "true" ]; then
            SET_ARGS+=(--set "backend-chart.image.tag=${TAG}")
          fi
          if [ "${{ needs.build-and-push.outputs.frontend_built }}" = "true" ]; then
            SET_ARGS+=(--set "frontend-chart.image.tag=${TAG}")
          fi
          if [ "${{ needs.build-and-push.outputs.airflow_built }}" = "true" ]; then
            AIRFLOW_TAG="\"${TAG}\""
            SET_ARGS+=(--set "images.airflow.tag=${AIRFLOW_TAG}")
          fi
          echo "Deploying to ${{ steps.environment.outputs.env_name }}..."
          echo "Applying extra args: ${SET_ARGS[@]}"
          
          # Chạy lệnh cuối cùng, truyền mảng tham số vào
          # Dấu ngoặc kép và ký hiệu "@" rất quan trọng để xử lý đúng các phần tử
          echo "Helmfile will set the following image tags:"
          echo "${SET_ARGS[@]}"
          #helmfile --environment ${{ steps.environment.outputs.env_name }} apply --suppress-secrets "${SET_ARGS[@]}"
          helmfile -e ${{ steps.environment.outputs.env_name }} apply --suppress-secrets "${SET_ARGS[@]}"
