PROJECT_ID: alpine-figure-461007-i9 


### model serving (Đang bị thiếu step deploy của litellm)
kubectl create namespace model-serving
kubectl get pods -n model-serving
kubectl port-forward svc/litellm-proxy-deployment 7000:4000 -n model-serving




### tạo Workload Identity
1. Tạo IAM Service Account (GSA):
    gcloud iam service-accounts create cloudsql-proxy-gsa \
    --project=alpine-figure-461007-i9

    gcloud projects add-iam-policy-binding alpine-figure-461007-i9 --member="serviceAccount:cloudsql-proxy-gsa@alpine-figure-461007-i9.iam.gserviceaccount.com" --role="roles/container.developer"
    gcloud projects add-iam-policy-binding alpine-figure-461007-i9 --member="serviceAccount:cloudsql-proxy-gsa@alpine-figure-461007-i9.iam.gserviceaccount.com" --role="roles/cloudsql.client"

2. Tạo Kubernetes Service Account (KSA):
    kubectl create serviceaccount airflow-ksa -n airflow
    
3. Liên kết GSA với KSA:
    gcloud iam service-accounts add-iam-policy-binding \
    --role="roles/iam.workloadIdentityUser" \
    --member="serviceAccount:alpine-figure-461007-i9.svc.id.goog[airflow/airflow-ksa]" \
    cloudsql-proxy-gsa@alpine-figure-461007-i9.iam.gserviceaccount.com

4. thêm annotate ksa
    kubectl annotate serviceaccount airflow-ksa \
    --namespace airflow \
    iam.gke.io/gcp-service-account=cloudsql-proxy-gsa@alpine-figure-461007-i9.iam.gserviceaccount.com --overwrite
##
gcloud container clusters update alpine-figure-461007-i9-gke-basic  \
  --workload-pool=alpine-figure-461007-i9.svc.id.goog \
  --region asia-southeast1-a

### Deploy airflow to gke
docker build -t gcr.io/alpine-figure-461007-i9/custom-airflow:latest .
docker push gcr.io/alpine-figure-461007-i9/custom-airflow:latest

kubectl create namespace airflow

## Tạo các secret
kubectl create secret generic airflow-db-connection -n airflow ^
  --from-literal=connection='postgresql+psycopg2://postgres:123456@127.0.0.1:5432/airflow'

kubectl create secret generic airflow-git-ssh-key --namespace airflow ^
  --from-file=gitSshKey=./airflow-gitsync

kubectl create secret generic airflow-fernet-key ^
  --from-literal=value='PpwOpKTKaHYo-TuiwCIMSwxNmBJknIf4rV5KctQ_8-k='

kubectl create secret generic airflow-webserver-secret-key ^
  --from-literal=value='b60a4906211cf835536284864f38c421'

kubectl get secret airflow-webserver-secret-key -n airflow -o yaml


kubectl delete secret airflow-db-connection airflow-git-ssh-key airflow-fernet-key airflow-webserver-secret-key --namespace airflow
kubectl delete secret airflow-webserver-secret-key --namespace airflow

kubectl delete pvc -n airflow --all
helm uninstall airflow -n airflow

helm repo add apache-airflow https://airflow.apache.org
helm repo update
helm upgrade --install airflow apache-airflow/airflow -f deployments/airflow/values_2.yaml

kubectl apply -f deployments/airflow/pvc.yaml 


## Tạo Gitsync cho Airflow
    kubectl create secret generic git-credentials --from-file=.git.env -n airflow

    # Tạo secret chứa SSH key
    kubectl create secret generic git-ssh-key-secret \
    --from-file=id_rsa=./airflow-gitsync \
    --namespace airflow

# kubectl exec -it airflow-scheduler-7c446bc5f9-t6sz5 -- bash
kubectl port-forward svc/airflow-webserver 8000:8080 -n airflow



# create storage bucket
gcloud storage buckets create gs://airflow-logs-tinhnv-gke \
  --project=alpine-figure-461007-i9 \
  --location=asia-southeast1 \
  --uniform-bucket-level-access

gsutil iam ch \
  serviceAccount:cloudsql-proxy-gsa@alpine-figure-461007-i9.iam.gserviceaccount.com:objectAdmin \
  gs://airflow-logs-tinhnv-gke
gsutil ls gs://airflow-logs-tinhnv-gke

gcloud storage buckets get-iam-policy gs://airflow-logs-tinhnv-gke \
  --flatten="bindings[].members" \
  --filter="bindings.members:'serviceAccount:cloudsql-proxy-gsa@alpine-figure-461007-i9.iam.gserviceaccount.com'" \
  --format="table(bindings.role)"

gcloud storage buckets add-iam-policy-binding airflow-logs-tinhnv-gke ^
  --member="serviceAccount:cloudsql-proxy-gsa@alpine-figure-461007-i9.iam.gserviceaccount.com" ^
  --role="roles/storage.objectAdmin"


gcloud container clusters describe alpine-figure-461007-i9-gke-basic  \
  --region asia-southeast1-a \
  --format="value(workloadIdentityConfig.workloadPool)"


# fix bug
helm template airflow apache-airflow/airflow -n airflow -f deployments\airflow\values_2.yaml > rendered-manifests.yaml
docker run -it gcr.io/alpine-figure-461007-i9/airflow-custom:latest bash
kubectl delete pods --all -n airflow




## build app deploy app streamlit lên GKE
1.  **Lấy Project ID của bạn:**
    ```bash
    gcloud config get-value project
    ```
    
2.  **Build và Push Image** (Sử dụng GCR hoặc Artifact Registry):
    ```bash
    # Thay alpine-figure-461007-i9 bằng Project ID của bạn
    export IMAGE_PATH="gcr.io/alpine-figure-461007-i9/streamlit-job-app:v1"
    
    # Build image
    docker build -t gcr.io/alpine-figure-461007-i9/streamlit-job-app:v1 .
    # Push image
    docker push $IMAGE_PATH
    ```

---

#### **Bước 2: Chuẩn bị Namespace và Workload Identity**

Chúng ta sẽ tạo một namespace `app` riêng biệt và một cặp KSA/GSA cho nó.

1.  **Tạo Namespace:**
    ```bash
    kubectl create namespace app
    ```
2.  **Tạo Kubernetes Service Account (KSA):**
    ```bash
    kubectl create serviceaccount streamlit-app-ksa -n app
    ```
3.  **Liên kết KSA với Google Service Account (GSA) của bạn:**
    Chúng ta sẽ tái sử dụng GSA `cloudsql-proxy-gsa` mà bạn đã tạo cho Airflow, vì nó đã có quyền `Cloud SQL Client`.
    ```bash
    # Thay alpine-figure-461007-i9
    gcloud iam service-accounts add-iam-policy-binding ^
      --role="roles/iam.workloadIdentityUser" ^
      --member="serviceAccount:alpine-figure-461007-i9.svc.id.goog[app/streamlit-app-ksa]" ^
      cloudsql-proxy-gsa@alpine-figure-461007-i9.iam.gserviceaccount.com
    ```
4.  **Gắn Annotation cho KSA:**
    ```bash
    kubectl annotate serviceaccount streamlit-app-ksa -n app ^
      iam.gke.io/gcp-service-account=cloudsql-proxy-gsa@alpine-figure-461007-i9.iam.gserviceaccount.com
    ```

---

#### **Bước 3: Tạo Secret cho Database trong Namespace `app`**

```bash
kubectl create secret generic streamlit-db-credentials -n app ^
  --from-literal=DB_USER=postgres ^
  --from-literal=DB_PASS=123456 ^
  --from-literal=DB_NAME=job_db
```

#### **Bước 5: Triển khai lên GKE**

```bash
kubectl delete deployment streamlit-app-deployment -n app
kubectl apply -f streamlit-deployment.yaml
```
kubectl delete pod --all -n app

---

#### **Bước 6: Truy cập ứng dụng**


Mở một terminal mới và chạy:
```bash
kubectl port-forward svc/streamlit-app-service 8080:80 -n app
```
