Sổ tay Vận hành: Triển khai Pipeline Dữ liệu lên GKE
Đây là quy trình từng bước để triển khai toàn bộ hệ thống, bao gồm Airflow, LiteLLM Gateway và ứng dụng Streamlit.
Thông tin Dự án:
Project ID: alpine-figure-461007-i9
Region/Zone: asia-southeast1 / asia-southeast1-a



Google Service Account (GSA): cloudsql-proxy-gsa
Giai đoạn 0: Thiết lập Hạ tầng & Quyền hạn (Làm một lần)
Các bước này chỉ cần thực hiện một lần duy nhất khi thiết lập môi trường.


1. Cấu hình Workload Identity cho GKE Cluster:
Mục đích: Bật tính năng cho phép các Pod GKE sử dụng danh tính của Google Service Account.
# Thay <YOUR_CLUSTER_NAME> và <YOUR_ZONE> bằng tên và zone của cluster bạn
gcloud container clusters update <YOUR_CLUSTER_NAME> \
    --zone=<YOUR_ZONE> \
    --workload-pool=alpine-figure-461007-i9.svc.id.goog


2. Tạo Google Service Account (GSA):
Mục đích: Tạo một danh tính trên Google Cloud cho toàn bộ ứng dụng của bạn.
# Tạo GSA
gcloud iam service-accounts create cloudsql-proxy-gsa \
    --display-name="Service Account for Airflow and Apps"


3. Cấp các quyền IAM cần thiết cho GSA:
Mục đích: Cho phép GSA có quyền tạo Pod, kết nối Cloud SQL, và ghi vào GCS.
# Lấy Project ID
export PROJECT_ID="alpine-figure-461007-i9"

# Lấy email của GSA
export GSA_EMAIL="cloudsql-proxy-gsa@${PROJECT_ID}.iam.gserviceaccount.com"

# Cấp quyền Kubernetes Engine Developer
gcloud projects add-iam-policy-binding $PROJECT_ID --member="serviceAccount:${GSA_EMAIL}" --role="roles/container.developer"

# Cấp quyền Cloud SQL Client
gcloud projects add-iam-policy-binding $PROJECT_ID --member="serviceAccount:${GSA_EMAIL}" --role="roles/cloudsql.client"


4. Tạo GCS Bucket cho Log:
Mục đích: Tạo nơi lưu trữ log lâu dài cho Airflow.
# Tạo Bucket (thay <UNIQUE_BUCKET_NAME> bằng tên bạn chọn)
export GCS_BUCKET_NAME="airflow-logs-tinhnv-gke"
gcloud storage buckets create gs://$GCS_BUCKET_NAME --project=$PROJECT_ID --location=asia-southeast1 --uniform-bucket-level-access

# Cấp quyền cho GSA ghi vào Bucket
gsutil iam ch serviceAccount:${GSA_EMAIL}:objectAdmin gs://$GCS_BUCKET_NAME


Giai đoạn 1: Triển khai Apache Airflow
1. Tạo Namespace và Kubernetes Service Account (KSA):
Mục đích: Tạo một không gian làm việc riêng cho Airflow trên GKE và một danh tính cho nó.
# Tạo namespace 'airflow'
kubectl create namespace airflow

# Tạo KSA 'airflow-ksa' trong namespace 'airflow'
kubectl create serviceaccount airflow-ksa -n airflow


2. Liên kết KSA với GSA (Workload Identity):
Mục đích: "Nối" danh tính trong K8s với danh tính trên Google Cloud.
# Liên kết
gcloud iam service-accounts add-iam-policy-binding \
  --role="roles/iam.workloadIdentityUser" \
  --member="serviceAccount:${PROJECT_ID}.svc.id.goog[airflow/airflow-ksa]" \
  ${GSA_EMAIL}

# Gắn Annotation
kubectl annotate serviceaccount airflow-ksa --namespace airflow \
  iam.gke.io/gcp-service-account=${GSA_EMAIL} --overwrite


3. Tạo các Kubernetes Secrets cần thiết:
Mục đích: Lưu trữ các thông tin nhạy cảm một cách an toàn.
# Secret chứa SSH Private Key để Git-Sync có thể clone repo (thay đường dẫn đến file key của bạn)
kubectl create secret generic airflow-git-ssh-key --namespace airflow \
  --from-file=gitSshKey=./path/to/your/gitsync_key

# Secret chứa chuỗi kết nối đến DATABASE NỘI BỘ của Airflow (do Helm tự tạo)
# Chúng ta không cần tạo secret này nữa vì đã cấu hình cho Helm tự quản lý


(Lưu ý: Các secret như airflow-fernet-key và airflow-webserver-secret-key sẽ được Helm tự động tạo và quản lý, bạn không cần tạo thủ công).
4. Build và Đẩy Docker Image tùy chỉnh:
Mục đích: Tạo một image Airflow có chứa tất cả các thư viện Python cần thiết.
# Build image với tag mới
docker build -t asia.gcr.io/alpine-figure-461007-i9/custom-airflow:v1 .

# Đẩy image lên GCR
docker push asia.gcr.io/alpine-figure-461007-i9/custom-airflow:v1


5. Triển khai Airflow bằng Helm:
Mục đích: Cài đặt toàn bộ hệ thống Airflow lên GKE bằng file cấu hình values.yaml.
# Thêm repo của Airflow (chỉ làm 1 lần)
helm repo add apache-airflow https://airflow.apache.org
helm repo update

# Triển khai! (đảm bảo file values.yaml đã đúng)
helm upgrade --install airflow apache-airflow/airflow \
  -n airflow \
  -f path/to/your/values.yaml


6. Các bước sau triển khai:
# Truy cập UI từ local
kubectl port-forward svc/airflow-webserver 8080:8080 -n airflow

# Tạo user admin đầu tiên (chạy sau khi đã vào bên trong pod scheduler)
# kubectl exec -it <pod-scheduler-name> -n airflow -- bash
# airflow users create --username admin --firstname Admin --role Admin --email admin@example.com


Giai đoạn 2: Triển khai LiteLLM Gateway
1. Tạo Namespace:
kubectl create namespace model-serving


2. Chuẩn bị file Manifest (ví dụ: litellm-deployment.yaml):
Mục đích: Định nghĩa cách chạy LiteLLM và cách các dịch vụ khác có thể truy cập nó.
# litellm-deployment.yaml

3. Triển khai LiteLLM:
kubectl apply -f litellm-deployment.yaml


Giai đoạn 3: Triển khai Ứng dụng (frontend & backend)

kubectl create ns application
## backend
# Lấy PROJECT_ID của bạn
export PROJECT_ID=$(gcloud config get-value project)

# Tên image: [region]-docker.pkg.dev/[PROJECT_ID]/[REPO_NAME]/[IMAGE_NAME]:[TAG]
export IMAGE_TAG=gcr.io/$PROJECT_ID/fastapi-backend:v2

# Build Docker image
docker build -t ${IMAGE_TAG} .

# Push image lên Artifact Registry
docker push ${IMAGE_TAG}

kubectl create sa fastapi-backend-ksa -n application

gcloud iam service-accounts add-iam-policy-binding \
  --role="roles/iam.workloadIdentityUser" \
  --member="serviceAccount:alpine-figure-461007-i9.svc.id.goog[application/fastapi-backend-ksa]" \
  cloudsql-proxy-gsa@alpine-figure-461007-i9.iam.gserviceaccount.com

# Gắn Annotation
kubectl annotate serviceaccount fastapi-backend-ksa \
  --namespace application \
  iam.gke.io/gcp-service-account=cloudsql-proxy-gsa@alpine-figure-461007-i9.iam.gserviceaccount.com \
  --overwrite


kubectl create secret generic db-credentials -n application --from-literal=database-url='postgresql://postgres:123456@127.0.0.1:5432/job_db'

kubectl apply -f deployments/backend-deployment.yaml

## frontend

# Đặt tên và tag cho image

export IMAGE_TAG=gcr.io/${PROJECT_ID}/react-frontend:v2

# Build Docker image
docker build -t ${IMAGE_TAG} .

# Đẩy image lên Artifact Registry
docker push ${IMAGE_TAG}

kubectl apply -f deployments/frontend-deployment.yaml
kubectl delete deployment react-frontend-deployment -n application

kubectl get service react-frontend-service -n application --watch
